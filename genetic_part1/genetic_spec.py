# -*- coding: utf-8 -*-
import random 
import mastermind as mm

"""
Created on Mon Feb 21 11:24:15 2022

@author: agademer & tdrumond

Template for exercise 1
(genetic algorithm module specification)
"""


class Individual:
    """Represents an Individual for a genetic algorithm"""

    def __init__(self, chromosome: list, fitness: float):
        """Initializes an Individual for a genetic algorithm 

        Args:
            chromosome (list[]): a list representing the individual's chromosome
            fitness (float): the individual's fitness (the higher, the better the fitness)
        """
        self.chromosome = chromosome
        self.fitness = fitness

    def __lt__(self, other):
        """Implementation of the less_than comparator operator"""

        return self.fitness < other.fitness

    def __repr__(self):
        """Representation of the object for print calls"""
        return f'Indiv({self.fitness:.1f},{self.chromosome})'


class GASolver:
    def __init__(self, selection_rate=0.5, mutation_rate=0.1):
        """Initializes an instance of a ga_solver for a given GAProblem

        Args:
            selection_rate (float, optional): Selection rate between 0 and 1.0. Defaults to 0.5.
            mutation_rate (float, optional): mutation_rate between 0 and 1.0. Defaults to 0.1.
        """
        self._selection_rate = selection_rate
        self._mutation_rate = mutation_rate
        self._population = []

    def reset_population(self, pop_size=50):
        """ Initialize the population with pop_size random Individuals """
        
        for i in range(pop_size):    # Loop pop_size'th times 
            chromosome = MATCH.generate_random_guess()  # Generate a random chromosome
            fitness = MATCH.rate_guess(chromosome)  # Get the fitness score of the chromosome generated
            new_individual = Individual(chromosome, fitness)    # Create a new Individual Object with the chromosome and its fitness score
            self._population.append(new_individual) # Add the Individual to the population


    def evolve_for_one_generation(self):
        """ Apply the process for one generation : 
            -	Sort the population (Descending order)
            -	Selection: Remove x% of population (less adapted)
            -   Reproduction: Recreate the same quantity by crossing the 
                surviving ones 
            -	Mutation: For each new Individual, mutate with probability 
                mutation_rate i.e., mutate it if a random value is below   
                mutation_rate
        """

        # Keep only the upper half of the Individuals i.e: the ones with the best fitness score

        self._population.sort(reverse=True) 
        self._population = self._population[0:int(self._selection_rate*len(self._population))]  
        
        mutants = [] # List containing the new individuals generated by crossing two parents   

        for i in range(len(self._population)):

            selection_point = 0
            selection_point_2 = 0


            while (selection_point == selection_point_2):   
                selection_point = random.randrange(0, len(self._population))
                selection_point_2 = random.randrange(0, len(self._population))

            parent_a = self._population[selection_point]
            parent_b = self._population[selection_point_2]

            # # MALO
            # temp_list = self._population
            # break_point = random.randrange(0, len(self._population))

            # parent_a = self._population[break_point]

            # temp_list.pop(parent_a)

            # break_point_2 = random.randrange(0, len(temp_list))
            # parent_b = temp_list[break_point_2]

            # # MALO

            x_point = random.randrange(0, len(parent_a.chromosome))
            new_chrom = parent_a.chromosome[0:x_point] + parent_b.chromosome[x_point:]
            new_indiv = Individual(new_chrom, MATCH.rate_guess(new_chrom) )

            number = random.random()

            if number < self._mutation_rate :
                valid_colors = mm.get_possible_colors()
                new_gene = random.choice(valid_colors)
                
                pos = random.randrange(0, len(new_indiv.chromosome))
 
                new_chrom = new_indiv.chromosome[0:pos] + [new_gene] + new_indiv.chromosome[pos+1:]
                new_indiv = Individual(new_chrom, MATCH.rate_guess(new_chrom))

            mutants.append(new_indiv)

        self._population = self._population + mutants 


    def show_generation_summary(self):
        """ Print some debug information on the current state of the population """
        pass  # REPLACE WITH YOUR CODE

    def get_best_individual(self):
        """ Return the best Individual of the population """
        self._population.sort(reverse=True)
        return self._population[0]

    def evolve_until(self, max_nb_of_generations=500, threshold_fitness=None):
        """ Launch the evolve_for_one_generation function until one of the two condition is achieved : 
            - Max nb of generation is achieved
            - The fitness of the best Individual is greater than or equal to
              threshold_fitness
        """
        for i in range(max_nb_of_generations):
            self.evolve_for_one_generation()
            best_individual = self.get_best_individual()

            if best_individual.fitness >= threshold_fitness :
                print(f'Found : {i}')
                break

# seed = random.seed()
MATCH = mm.MastermindMatch(secret_size=4) 
solver = GASolver()
solver.reset_population()
solver.evolve_until(threshold_fitness=MATCH.max_score())
best = solver.get_best_individual()
print(f"Best guess {best.chromosome}")
print(f"Problem solved? {MATCH.is_correct(best.chromosome)}")
